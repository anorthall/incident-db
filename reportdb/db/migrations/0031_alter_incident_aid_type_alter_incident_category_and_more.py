# Generated by Django 4.2.7 on 2023-11-17 23:37

from django.db import migrations, models


class NewChoices:
    class DataInput(models.TextChoices):
        UNKNOWN = "YY", "Unknown"
        HUMAN = "HU", "Human"
        AI = "AI", "AI"

    class PrimaryType(models.TextChoices):
        UNKNOWN = "YY", "Unknown"
        ROCKFALL = "B", "Rockfall"
        STUCK = "C", "Stuck"
        LOST = "D", "Lost"
        STRANDED = "E", "Stranded"
        ROPE = "F", "Difficulty on rope"
        LADDER = "G", "Difficulty on ladder"
        EQUIPMENT = "H", "Equipment problems"
        HYPOTHERMIA = "I", "Hypothermia"
        RAPPEL = "J", "Lost control on rappel"
        RIGGING = "K", "Rigging problems"
        FALL = "L", "Caver fall"
        DROWNING = "M", "Drowning"
        ACETYLENE = "N", "Acetylene related"
        AIR = "O", "Bad air"
        ILLNESS = "P", "Illness"
        INJURY = "Q", "Injury that does not fit other categories"

    class SecondaryType(models.TextChoices):
        NONE = "XX", "None"
        ROCKFALL = "B", "Rockfall"
        STUCK = "C", "Stuck"
        LOST = "D", "Lost"
        STRANDED = "E", "Stranded"
        ROPE = "F", "Difficulty on rope"
        LADDER = "G", "Difficulty on ladder"
        EQUIPMENT = "H", "Equipment problems"
        HYPOTHERMIA = "I", "Hypothermia"
        RAPPEL = "J", "Lost control on rappel"
        RIGGING = "K", "Rigging problems"
        FALL = "L", "Caver fall"
        DROWNING = "M", "Drowning"
        ACETYLENE = "N", "Acetylene related"
        AIR = "O", "Bad air"
        ILLNESS = "P", "Illness"
        INJURY = "Q", "Injury that does not fit other categories"

    class Category(models.TextChoices):
        UNKNOWN = "YY", "Unknown"
        CAVING = "CA", "Caving"
        CAVING_RELATED = "CR", "Caving related"
        DIVING = "CD", "Cave diving"
        OTHER = "ZZ", "Other"

    class AidType(models.TextChoices):
        UNKNOWN = "YY", "Unknown"
        SURFACE = "SU", "Surface aid"
        UNDERGROUND = "UN", "Underground aid"
        RECOVERY = "RE", "Body recovery"
        STANDBY = "ST", "Aid on standby"
        OTHER = "ZZ", "Other"
        NONE = "XX", "None"

    class GroupType(models.TextChoices):
        UNKNOWN = "YY", "Unknown"
        CAVERS = "CA", "Cavers"
        NOVICES = "NO", "Novice cavers"
        COLLEGE = "CO", "College cavers"
        CLUB = "CL", "Club or grotto cavers"
        NONCAVERS = "NC", "Non-cavers"
        DIVERS = "DI", "Cave divers"
        INDUSTRY = "IN", "Industrial"
        MILITARY = "MI", "Military"
        OTHER = "ZZ", "Other"

    class Source(models.TextChoices):
        UNKNOWN = "YY", "Unknown"
        INJURED_CAVER = "CA", "Injured caver"
        CAVER_IN_PARTY = "PA", "Member of injured caver's party"
        THIRD_PARTY = "TH", "Third party"


class OldChoices:
    OTHER = "Other"
    UNKNOWN = "Unknown"
    NONE = "None"

    TYPE_ROCKFALL = "Rockfall"
    TYPE_STUCK = "Stuck"
    TYPE_LOST = "Lost"
    TYPE_STRANDED = "Stranded"
    TYPE_ROPE = "Difficulty on rope"
    TYPE_LADDER = "Difficulty on ladder"
    TYPE_EQUIPMENT = "Equipment problems"
    TYPE_HYPOTHERMIA = "Hypothermia"
    TYPE_RAPPEL = "Lost control on rappel"
    TYPE_RIGGING = "Rigging problems"
    TYPE_FALL = "Caver fall"
    TYPE_DROWNING = "Drowning"
    TYPE_ACETYLENE = "Acetylene related"
    TYPE_AIR = "Bad air"
    TYPE_ILLNESS = "Illness"
    TYPE_INJURY = "Injury"

    INCIDENT_TYPE_CHOICES = (
        (TYPE_ROCKFALL, TYPE_ROCKFALL),
        (TYPE_STUCK, TYPE_STUCK),
        (TYPE_LOST, TYPE_LOST),
        (TYPE_STRANDED, TYPE_STRANDED),
        (TYPE_ROPE, TYPE_ROPE),
        (TYPE_LADDER, TYPE_LADDER),
        (TYPE_EQUIPMENT, TYPE_EQUIPMENT),
        (TYPE_HYPOTHERMIA, TYPE_HYPOTHERMIA),
        (TYPE_RAPPEL, TYPE_RAPPEL),
        (TYPE_RIGGING, TYPE_RIGGING),
        (TYPE_FALL, TYPE_FALL),
        (TYPE_DROWNING, TYPE_DROWNING),
        (TYPE_ACETYLENE, TYPE_ACETYLENE),
        (TYPE_AIR, TYPE_AIR),
        (TYPE_ILLNESS, TYPE_ILLNESS),
        (TYPE_INJURY, "Injury that does not fit other categories"),
    )
    PRIMARY_TYPE_CHOICES = (*INCIDENT_TYPE_CHOICES, (OTHER, OTHER))
    SECONDARY_TYPE_CHOICES = ((NONE, NONE), *INCIDENT_TYPE_CHOICES)

    SOURCE_CAVER = "Injured caver"
    SOURCE_PARTY = "Member of injured caver's party"
    SOURCE_THIRD_PARTY = "Third party"
    SOURCE_CHOICES = (
        (UNKNOWN, UNKNOWN),
        (SOURCE_CAVER, SOURCE_CAVER),
        (SOURCE_PARTY, SOURCE_PARTY),
        (SOURCE_THIRD_PARTY, SOURCE_THIRD_PARTY),
    )

    CAVERS = "Cavers"
    NOVICES = "Novice cavers"
    COLLEGE = "College cavers"
    CLUB = "Club or grotto cavers"
    NONCAVERS = "Non-cavers"
    DIVERS = "Cave divers"
    INDUSTRY = "Industrial"
    MILITARY = "Military"
    GROUP_TYPE_CHOICES = (
        (UNKNOWN, UNKNOWN),
        (CAVERS, CAVERS),
        (NOVICES, NOVICES),
        (COLLEGE, COLLEGE),
        (CLUB, CLUB),
        (NONCAVERS, NONCAVERS),
        (DIVERS, DIVERS),
        (INDUSTRY, "Industrial (e.g. mining, construction, etc.)"),
        (MILITARY, MILITARY),
        (OTHER, OTHER),
    )

    AID_NONE = "None"
    AID_SURFACE = "Surface aid"
    AID_UNDERGROUND = "Underground aid"
    AID_RECOVERY = "Body recovery"
    AID_STANDBY = "Aid on standby"
    AID_CHOICES = (
        (UNKNOWN, UNKNOWN),
        (AID_NONE, AID_NONE),
        (AID_SURFACE, AID_SURFACE),
        (AID_UNDERGROUND, AID_UNDERGROUND),
        (AID_RECOVERY, AID_RECOVERY),
        (AID_STANDBY, AID_STANDBY),
        (OTHER, OTHER),
    )

    CAVING = "Caving"
    CAVING_RELATED = "Caving related"
    DIVING = "Cave diving"
    CATEGORY_CHOICES = (
        (CAVING, CAVING),
        (CAVING_RELATED, CAVING_RELATED),
        (DIVING, DIVING),
        (OTHER, OTHER),
    )


def convert_category_to_new_choices(apps, schema_editor):
    Incident = apps.get_model("db", "Incident")

    for incident in Incident.objects.all():
        if incident.category == OldChoices.CAVING:
            incident.category = NewChoices.Category.CAVING
        elif incident.category == OldChoices.CAVING_RELATED:
            incident.category = NewChoices.Category.CAVING_RELATED
        elif incident.category == OldChoices.DIVING:
            incident.category = NewChoices.Category.DIVING
        elif incident.category == OldChoices.OTHER:
            incident.category = NewChoices.Category.OTHER
        elif incident.category == OldChoices.UNKNOWN:
            incident.category = NewChoices.Category.UNKNOWN
        else:
            raise ValueError(f"Unknown category: {incident.category}")
        incident.save()


def convert_aid_type_to_new_choices(apps, schema_editor):
    Incident = apps.get_model("db", "Incident")

    for incident in Incident.objects.all():
        if incident.aid_type == OldChoices.AID_NONE:
            incident.aid_type = NewChoices.AidType.NONE
        elif incident.aid_type == OldChoices.AID_SURFACE:
            incident.aid_type = NewChoices.AidType.SURFACE
        elif incident.aid_type == OldChoices.AID_UNDERGROUND:
            incident.aid_type = NewChoices.AidType.UNDERGROUND
        elif incident.aid_type == OldChoices.AID_RECOVERY:
            incident.aid_type = NewChoices.AidType.RECOVERY
        elif incident.aid_type == OldChoices.AID_STANDBY:
            incident.aid_type = NewChoices.AidType.STANDBY
        elif incident.aid_type == OldChoices.OTHER:
            incident.aid_type = NewChoices.AidType.OTHER
        elif incident.aid_type == OldChoices.UNKNOWN:
            incident.aid_type = NewChoices.AidType.UNKNOWN
        else:
            raise ValueError(f"Unknown aid type: {incident.aid_type}")
        incident.save()


def convert_group_type_to_new_choices(apps, schema_editor):
    Incident = apps.get_model("db", "Incident")

    for incident in Incident.objects.all():
        if incident.group_type == OldChoices.CAVERS:
            incident.group_type = NewChoices.GroupType.CAVERS
        elif incident.group_type == OldChoices.NONCAVERS:
            incident.group_type = NewChoices.GroupType.NONCAVERS
        elif incident.group_type == OldChoices.CLUB:
            incident.group_type = NewChoices.GroupType.CLUB
        elif incident.group_type == OldChoices.COLLEGE:
            incident.group_type = NewChoices.GroupType.COLLEGE
        elif incident.group_type == OldChoices.DIVERS:
            incident.group_type = NewChoices.GroupType.DIVERS
        elif incident.group_type == OldChoices.INDUSTRY:
            incident.group_type = NewChoices.GroupType.INDUSTRY
        elif incident.group_type == OldChoices.MILITARY:
            incident.group_type = NewChoices.GroupType.MILITARY
        elif incident.group_type == OldChoices.NOVICES:
            incident.group_type = NewChoices.GroupType.NOVICES
        elif incident.group_type == OldChoices.OTHER:
            incident.group_type = NewChoices.GroupType.OTHER
        elif incident.group_type == OldChoices.UNKNOWN:
            incident.group_type = NewChoices.GroupType.UNKNOWN
        else:
            raise ValueError(f"Unknown group type: {incident.group_type}")
        incident.save()


def convert_source_to_new_choices(apps, schema_editor):
    Incident = apps.get_model("db", "Incident")

    for incident in Incident.objects.all():
        if incident.source == OldChoices.SOURCE_CAVER:
            incident.source = NewChoices.Source.INJURED_CAVER
        elif incident.source == OldChoices.SOURCE_PARTY:
            incident.source = NewChoices.Source.CAVER_IN_PARTY
        elif incident.source == OldChoices.SOURCE_THIRD_PARTY:
            incident.source = NewChoices.Source.THIRD_PARTY
        elif incident.source == OldChoices.UNKNOWN:
            incident.source = NewChoices.Source.UNKNOWN
        else:
            raise ValueError(f"Unknown source: {incident.source}")
        incident.save()


def convert_incident_type_to_new_choices(apps, schema_editor):
    Incident = apps.get_model("db", "Incident")

    fields = [
        "incident_type",
        "incident_type_2",
        "incident_type_3",
    ]

    for incident in Incident.objects.all():
        for field in fields:
            if getattr(incident, field) == OldChoices.NONE:
                setattr(incident, field, NewChoices.SecondaryType.NONE)
            elif getattr(incident, field) == OldChoices.TYPE_ROCKFALL:
                setattr(incident, field, NewChoices.PrimaryType.ROCKFALL)
            elif getattr(incident, field) == OldChoices.TYPE_STUCK:
                setattr(incident, field, NewChoices.PrimaryType.STUCK)
            elif getattr(incident, field) == OldChoices.TYPE_LOST:
                setattr(incident, field, NewChoices.PrimaryType.LOST)
            elif getattr(incident, field) == OldChoices.TYPE_STRANDED:
                setattr(incident, field, NewChoices.PrimaryType.STRANDED)
            elif getattr(incident, field) == OldChoices.TYPE_ROPE:
                setattr(incident, field, NewChoices.PrimaryType.ROPE)
            elif getattr(incident, field) == OldChoices.TYPE_LADDER:
                setattr(incident, field, NewChoices.PrimaryType.LADDER)
            elif getattr(incident, field) == OldChoices.TYPE_EQUIPMENT:
                setattr(incident, field, NewChoices.PrimaryType.EQUIPMENT)
            elif getattr(incident, field) == OldChoices.TYPE_HYPOTHERMIA:
                setattr(incident, field, NewChoices.PrimaryType.HYPOTHERMIA)
            elif getattr(incident, field) == OldChoices.TYPE_RAPPEL:
                setattr(incident, field, NewChoices.PrimaryType.RAPPEL)
            elif getattr(incident, field) == OldChoices.TYPE_RIGGING:
                setattr(incident, field, NewChoices.PrimaryType.RIGGING)
            elif getattr(incident, field) == OldChoices.TYPE_FALL:
                setattr(incident, field, NewChoices.PrimaryType.FALL)
            elif getattr(incident, field) == OldChoices.TYPE_DROWNING:
                setattr(incident, field, NewChoices.PrimaryType.DROWNING)
            elif getattr(incident, field) == OldChoices.TYPE_ACETYLENE:
                setattr(incident, field, NewChoices.PrimaryType.ACETYLENE)
            elif getattr(incident, field) == OldChoices.TYPE_AIR:
                setattr(incident, field, NewChoices.PrimaryType.AIR)
            elif getattr(incident, field) == OldChoices.TYPE_ILLNESS:
                setattr(incident, field, NewChoices.PrimaryType.ILLNESS)
            elif getattr(incident, field) == OldChoices.TYPE_INJURY:
                setattr(incident, field, NewChoices.PrimaryType.INJURY)
            else:
                print(
                    f"Unknown incident type on f{incident.id}: {getattr(incident, field)}"
                )
                if field == "incident_type":
                    setattr(incident, field, NewChoices.PrimaryType.UNKNOWN)
                else:
                    setattr(incident, field, NewChoices.SecondaryType.NONE)

        incident.save()


class Migration(migrations.Migration):
    dependencies = [
        ("db", "0030_publication_pdf_file_publication_text_file"),
    ]

    operations = [
        migrations.AlterField(
            model_name="incident",
            name="aid_type",
            field=models.CharField(
                choices=[
                    ("YY", "Unknown"),
                    ("SU", "Surface aid"),
                    ("UN", "Underground aid"),
                    ("RE", "Body recovery"),
                    ("ST", "Aid on standby"),
                    ("ZZ", "Other"),
                    ("XX", "None"),
                ],
                default="YY",
                help_text="The type of aid required.",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="incident",
            name="category",
            field=models.CharField(
                choices=[
                    ("YY", "Unknown"),
                    ("CA", "Caving"),
                    ("CR", "Caving related"),
                    ("CD", "Cave diving"),
                    ("ZZ", "Other"),
                ],
                default="YY",
                help_text="Select the category that best describes the incident.",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="incident",
            name="group_type",
            field=models.CharField(
                choices=[
                    ("YY", "Unknown"),
                    ("CA", "Cavers"),
                    ("NO", "Novice cavers"),
                    ("CO", "College cavers"),
                    ("CL", "Club or grotto cavers"),
                    ("NC", "Non-cavers"),
                    ("DI", "Cave divers"),
                    ("IN", "Industrial"),
                    ("MI", "Military"),
                    ("ZZ", "Other"),
                ],
                default="YY",
                help_text="The type of group involved in the incident.",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="incident",
            name="incident_type",
            field=models.CharField(
                choices=[
                    ("YY", "Unknown"),
                    ("B", "Rockfall"),
                    ("C", "Stuck"),
                    ("D", "Lost"),
                    ("E", "Stranded"),
                    ("F", "Difficulty on rope"),
                    ("G", "Difficulty on ladder"),
                    ("H", "Equipment problems"),
                    ("I", "Hypothermia"),
                    ("J", "Lost control on rappel"),
                    ("K", "Rigging problems"),
                    ("L", "Caver fall"),
                    ("M", "Drowning"),
                    ("N", "Acetylene related"),
                    ("O", "Bad air"),
                    ("P", "Illness"),
                    ("Q", "Injury that does not fit other categories"),
                ],
                default="YY",
                help_text="The type of the incident. If the incident does not fit any of the categories, select 'Other'. If you feel that a new category should be added, please make a note of this in the 'Editing notes' field.",
                max_length=100,
                verbose_name="Primary type",
            ),
        ),
        migrations.AlterField(
            model_name="incident",
            name="incident_type_2",
            field=models.CharField(
                choices=[
                    ("XX", "None"),
                    ("B", "Rockfall"),
                    ("C", "Stuck"),
                    ("D", "Lost"),
                    ("E", "Stranded"),
                    ("F", "Difficulty on rope"),
                    ("G", "Difficulty on ladder"),
                    ("H", "Equipment problems"),
                    ("I", "Hypothermia"),
                    ("J", "Lost control on rappel"),
                    ("K", "Rigging problems"),
                    ("L", "Caver fall"),
                    ("M", "Drowning"),
                    ("N", "Acetylene related"),
                    ("O", "Bad air"),
                    ("P", "Illness"),
                    ("Q", "Injury that does not fit other categories"),
                ],
                default="XX",
                help_text="If the incident fits a second type category, enter it here.",
                max_length=100,
                verbose_name="Secondary type",
            ),
        ),
        migrations.AlterField(
            model_name="incident",
            name="incident_type_3",
            field=models.CharField(
                choices=[
                    ("XX", "None"),
                    ("B", "Rockfall"),
                    ("C", "Stuck"),
                    ("D", "Lost"),
                    ("E", "Stranded"),
                    ("F", "Difficulty on rope"),
                    ("G", "Difficulty on ladder"),
                    ("H", "Equipment problems"),
                    ("I", "Hypothermia"),
                    ("J", "Lost control on rappel"),
                    ("K", "Rigging problems"),
                    ("L", "Caver fall"),
                    ("M", "Drowning"),
                    ("N", "Acetylene related"),
                    ("O", "Bad air"),
                    ("P", "Illness"),
                    ("Q", "Injury that does not fit other categories"),
                ],
                default="XX",
                help_text="If the incident fits a third type category, enter it here.",
                max_length=100,
                verbose_name="Tertiary type",
            ),
        ),
        migrations.AlterField(
            model_name="incident",
            name="source",
            field=models.CharField(
                choices=[
                    ("YY", "Unknown"),
                    ("CA", "Injured caver"),
                    ("PA", "Member of injured caver's party"),
                    ("TH", "Third party"),
                ],
                default="YY",
                help_text="The source of the incident information.",
                max_length=50,
            ),
        ),
        migrations.RunPython(
            convert_category_to_new_choices,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            convert_aid_type_to_new_choices,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            convert_group_type_to_new_choices,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            convert_source_to_new_choices,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            convert_incident_type_to_new_choices,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
